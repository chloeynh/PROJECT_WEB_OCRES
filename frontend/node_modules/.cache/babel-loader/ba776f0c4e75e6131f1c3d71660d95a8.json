{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst protobuf = require(\"protobufjs\");\n\nclass GoogleError extends Error {\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {// ignoring the error\n    }\n\n    return err;\n  } // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static parseHttpError(json) {\n    const error = Object.assign(new GoogleError(json['error']['message']), json.error); // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"detials\" to \"statusDetails\".\n\n    error.statusDetails = json['error']['details'];\n    delete error.details; // Promote the ErrorInfo fields as error's top-level.\n\n    const errorInfo = !json['error']['details'] ? undefined : json['error']['details'].find(item => item['@type'] === 'type.googleapis.com/google.rpc.ErrorInfo');\n\n    if (errorInfo) {\n      error.reason = errorInfo.reason;\n      error.domain = errorInfo.domain; // error.metadata has been occupied for gRPC metadata, so we use\n      // errorInfoMetadat to represent ErrorInfo' metadata field. Keep\n      // consistency with gRPC ErrorInfo metadata field name.\n\n      error.errorInfoMetadata = errorInfo.metadata;\n    }\n\n    return error;\n  }\n\n}\n\nexports.GoogleError = GoogleError;\n\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(\"Unknown type encoded in google.protobuf.any: \".concat(anyValue.type_url));\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(\"Cannot lookup type \".concat(typeName));\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const details = [];\n    let errorInfo;\n\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n      domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n      errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = \"\".concat(status.code, \" \").concat(status_1.Status[status.code], \": \").concat(status.message);\n    return Object.assign(new GoogleError(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  } // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n\n\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  }\n\n}\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":null,"metadata":{},"sourceType":"script"}