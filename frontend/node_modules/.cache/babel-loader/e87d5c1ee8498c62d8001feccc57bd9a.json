{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nvar _slicedToArray = require(\"/Users/chloe/Documents/Cours/ING4/Techno Web/PROJECT_WEB_OCRES/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationServiceClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v3/translation_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./translation_service_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3\n */\n\n\nclass TranslationServiceClient {\n  /**\n   * Construct an instance of TranslationServiceClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set useJWTAccessWithScope on the auth object.\n\n    this.auth.useJWTAccessWithScope = true; // Set defaultServicePath on the auth object.\n\n    this.auth.defaultServicePath = staticMembers.servicePath; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(\"rest/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries')\n    };\n\n    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos); // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateResponse');\n    const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateMetadata');\n    const batchTranslateDocumentResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentResponse');\n    const batchTranslateDocumentMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentMetadata');\n    const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.Glossary');\n    const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.CreateGlossaryMetadata');\n    const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryResponse');\n    const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryMetadata');\n    this.descriptors.longrunning = {\n      batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n      batchTranslateDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateDocumentResponse.decode.bind(batchTranslateDocumentResponse), batchTranslateDocumentMetadata.decode.bind(batchTranslateDocumentMetadata)),\n      createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n      deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3.TranslationService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = gax.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.translationServiceStub) {\n      return this.translationServiceStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.translation.v3.TranslationService.\n\n\n    this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.translation.v3.TranslationService') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.translation.v3.TranslationService, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const translationServiceStubMethods = ['translateText', 'detectLanguage', 'getSupportedLanguages', 'translateDocument', 'batchTranslateText', 'batchTranslateDocument', 'createGlossary', 'listGlossaries', 'getGlossary', 'deleteGlossary'];\n\n    for (const methodName of translationServiceStubMethods) {\n      const callPromise = this.translationServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.translationServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-translation'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Translates input text and returns translated text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string[]} request.contents\n   *   Required. The content of the input in string format.\n   *   We recommend the total content be less than 30k codepoints. The max length\n   *   of this field is 1024.\n   *   Use BatchTranslateText for larger text.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input text if\n   *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n   *   listed in Language Support. If the source language isn't specified, the API\n   *   attempts to identify the source language automatically and returns the\n   *   source language within the response.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   text, set to one of the language codes listed in Language Support.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or\n   *   custom glossaries.\n   *\n   *   Models and glossaries must be within the same region (have same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   For global (non-regionalized) requests, use `location-id` `global`.\n   *   For example,\n   *   `projects/{project-number-or-id}/locations/global/models/general/nmt`.\n   *\n   *   If not provided, the default Google model (NMT) will be used.\n   * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be\n   *   within the same region (have the same location-id) as the model, otherwise\n   *   an INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3.TranslateTextResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.translateText(request);\n   */\n\n\n  translateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.translateText(request, options, callback);\n  }\n  /**\n   * Detects the language of text within a request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Only models within the same region (has same location-id) can be used.\n   *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The language detection model to be used.\n   *\n   *   Format:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}`\n   *\n   *   Only one language detection model is currently supported:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`.\n   *\n   *   If not specified, the default model is used.\n   * @param {string} request.content\n   *   The content of the input stored as a string.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3.DetectLanguageResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.detectLanguage(request);\n   */\n\n\n  detectLanguage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.detectLanguage(request, options, callback);\n  }\n  /**\n   * Returns a list of supported languages for translation.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for AutoML models.\n   *\n   *   Only models within the same region (have same location-id) can be used,\n   *   otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.displayLanguageCode]\n   *   Optional. The language to use to return localized, human readable names\n   *   of supported languages. If missing, then display names are not returned\n   *   in a response.\n   * @param {string} [request.model]\n   *   Optional. Get supported languages of this model.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   Returns languages supported by the specified model.\n   *   If missing, we get supported languages of Google general NMT model.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3.SupportedLanguages}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSupportedLanguages(request);\n   */\n\n\n  getSupportedLanguages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSupportedLanguages(request, options, callback);\n  }\n  /**\n   * Translates documents in synchronous mode.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a regional call.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or custom\n   *   glossaries.\n   *\n   *   Models and glossaries must be within the same region (have the same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input document if known, for\n   *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n   *   Language Support. If the source language isn't specified, the API attempts\n   *   to identify the source language automatically and returns the source\n   *   language within the response. Source language must be specified if the\n   *   request contains a glossary or a custom model.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   document, set to one of the language codes listed in Language Support.\n   * @param {google.cloud.translation.v3.DocumentInputConfig} request.documentInputConfig\n   *   Required. Input configurations.\n   * @param {google.cloud.translation.v3.DocumentOutputConfig} [request.documentOutputConfig]\n   *   Optional. Output configurations.\n   *   Defines if the output file should be stored within Cloud Storage as well\n   *   as the desired output format. If not provided the translated file will\n   *   only be returned through a byte-stream and its output mime type will be\n   *   the same as the input file's mime type.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If not provided, the default Google model (NMT) will be used for\n   *   translation.\n   * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be within the same\n   *   region (have the same location-id) as the model, otherwise an\n   *   INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters (Unicode\n   *   codepoints), can only contain lowercase letters, numeric characters,\n   *   underscores and dashes. International characters are allowed. Label values\n   *   are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateDocumentResponse]{@link google.cloud.translation.v3.TranslateDocumentResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.translateDocument(request);\n   */\n\n\n  translateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.translateDocument(request, options, callback);\n  }\n  /**\n   * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to retrieve.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getGlossary(request);\n   */\n\n\n  getGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getGlossary(request, options, callback);\n  }\n  /**\n   * Translates a large volume of text in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can\n   * use google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a call. Must refer to a caller's project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. Source language code.\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. Specify up to 10 language codes here.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 100.\n   *   The total content size should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3.OutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied for translation.\n   *   It's keyed by target language code.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.batchTranslateText(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  batchTranslateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchTranslateText(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `batchTranslateText()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkBatchTranslateTextProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkBatchTranslateTextProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n\n    const _ref = await this.operationsClient.getOperation(request),\n          _ref2 = _slicedToArray(_ref, 1),\n          operation = _ref2[0];\n\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateText, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Translates a large volume of document in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can use\n   * google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a regional call.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. The BCP-47 language code of the input document if known, for\n   *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n   *   Language Support (https://cloud.google.com/translate/docs/languages).\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   document. Specify up to 10 language codes here.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 100.\n   *   The total content size to translate should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3.BatchDocumentOutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is the model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied. It's keyed by target language code.\n   * @param {number[]} [request.formatConversions]\n   *   Optional. File format conversion map to be applied to all input files.\n   *   Map's key is the original mime_type. Map's value is the target mime_type of\n   *   translated documents.\n   *\n   *   Supported file format conversion includes:\n   *   - `application/pdf` to\n   *     `application/vnd.openxmlformats-officedocument.wordprocessingml.document`\n   *\n   *   If nothing specified, output files will be in the same format as the\n   *   original file.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.batchTranslateDocument(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  batchTranslateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchTranslateDocument(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `batchTranslateDocument()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkBatchTranslateDocumentProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkBatchTranslateDocumentProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n\n    const _ref3 = await this.operationsClient.getOperation(request),\n          _ref4 = _slicedToArray(_ref3, 1),\n          operation = _ref4[0];\n\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateDocument, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Creates a glossary and returns the long-running operation. Returns\n   * NOT_FOUND, if the project doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project name.\n   * @param {google.cloud.translation.v3.Glossary} request.glossary\n   *   Required. The glossary to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.createGlossary(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  createGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `createGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkCreateGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkCreateGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n\n    const _ref5 = await this.operationsClient.getOperation(request),\n          _ref6 = _slicedToArray(_ref5, 1),\n          operation = _ref6[0];\n\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Deletes a glossary, or cancels glossary construction\n   * if the glossary isn't created yet.\n   * Returns NOT_FOUND, if the glossary doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to delete.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.deleteGlossary(request);\n   * const [response] = await operation.promise();\n   */\n\n\n  deleteGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `deleteGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkDeleteGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n\n\n  async checkDeleteGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n\n    const _ref7 = await this.operationsClient.getOperation(request),\n          _ref8 = _slicedToArray(_ref7, 1),\n          operation = _ref8[0];\n\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listGlossaries(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listGlossaries(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3.Glossary} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listGlossariesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const defaultCallSettings = this._defaults['listGlossaries'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);\n  }\n  /**\n   * Equivalent to `listGlossaries`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Glossary]{@link google.cloud.translation.v3.Glossary}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listGlossariesAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listGlossariesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const defaultCallSettings = this._defaults['listGlossaries'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls['listGlossaries'], request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified glossary resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} glossary\n   * @returns {string} Resource name string.\n   */\n\n\n  glossaryPath(project, location, glossary) {\n    return this.pathTemplates.glossaryPathTemplate.render({\n      project: project,\n      location: location,\n      glossary: glossary\n    });\n  }\n  /**\n   * Parse the project from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n  }\n  /**\n   * Parse the location from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n  }\n  /**\n   * Parse the glossary from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the glossary.\n   */\n\n\n  matchGlossaryFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n\n\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.translationServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.operationsClient.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.TranslationServiceClient = TranslationServiceClient;","map":null,"metadata":{},"sourceType":"script"}