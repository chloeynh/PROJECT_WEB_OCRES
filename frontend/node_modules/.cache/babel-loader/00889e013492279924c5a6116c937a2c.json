{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst serializer = require(\"proto3-json-serializer\");\n\nconst fallback_1 = require(\"./fallback\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nconst googleError_1 = require(\"./googleError\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nif (!featureDetection_1.hasTextEncoder() || !featureDetection_1.hasTextDecoder()) {\n  if (featureDetection_1.isNodeJS()) {\n    // Node.js 10 does not have global TextDecoder\n    // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const util = require('util');\n\n    Object.assign(global, {\n      TextDecoder: util.TextDecoder,\n      TextEncoder: util.TextEncoder\n    });\n  } else {\n    require('fast-text-encoding');\n  }\n}\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message);\n\n  if (!json) {\n    throw new Error(\"Cannot send null request to RPC \".concat(rpc.name, \".\"));\n  }\n\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(\"Request to RPC \".concat(rpc.name, \" must be an object.\"));\n  }\n\n  const transcoded = transcoding_1.transcode(json, rpc.parsedOptions, rpc.resolvedRequestType.fields);\n\n  if (!transcoded) {\n    throw new Error(\"Cannot build HTTP request for \".concat(JSON.stringify(json), \", method: \").concat(rpc.name));\n  }\n\n  const method = transcoded.httpMethod;\n  const body = JSON.stringify(transcoded.data);\n  const url = \"\".concat(protocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/\").concat(transcoded.url.replace(/^\\//, ''), \"?\").concat(transcoded.queryString);\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n\n  if (!ok) {\n    const error = googleError_1.GoogleError.parseHttpError(json);\n    throw error;\n  }\n\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n\n  if (!message) {\n    throw new Error(\"Received null response from RPC \".concat(rpc.name));\n  }\n\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":null,"metadata":{},"sourceType":"script"}