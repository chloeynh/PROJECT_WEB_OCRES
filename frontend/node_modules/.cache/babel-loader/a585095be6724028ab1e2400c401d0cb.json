{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceCollector = void 0;\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */\n\nclass ResourceCollector {\n  constructor(apiCall, maxResults = -1) {\n    this.apiCall = apiCall;\n    this.resources = [];\n    this.maxResults = maxResults;\n  }\n\n  callback(err, resources, nextPageRequest) {\n    if (err) {\n      // Something went wrong with this request - failing everything\n      this.rejectCallback(err);\n      return;\n    } // Process one page\n\n\n    for (const resource of resources) {\n      this.resources.push(resource);\n\n      if (this.resources.length === this.maxResults) {\n        nextPageRequest = null;\n        break;\n      }\n    } // All done?\n\n\n    if (!nextPageRequest) {\n      this.resolveCallback(this.resources);\n      return;\n    } // Schedule the next call\n\n\n    const callback = (...args) => this.callback(...args);\n\n    setImmediate(this.apiCall, nextPageRequest, callback);\n  }\n\n  processAllPages(firstRequest) {\n    return new Promise((resolve, reject) => {\n      this.resolveCallback = resolve;\n      this.rejectCallback = reject; // Schedule the first call\n\n      const callback = (...args) => this.callback(...args);\n\n      setImmediate(this.apiCall, firstRequest, callback);\n    });\n  }\n\n}\n\nexports.ResourceCollector = ResourceCollector;","map":null,"metadata":{},"sourceType":"script"}