{"ast":null,"code":"\"use strict\"; // Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/service\n */\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst util_1 = require(\"./util\");\n\nconst PROJECT_ID_TOKEN = '{{projectId}}';\n\nclass Service {\n  /**\n   * Service is a base class, meant to be inherited from by a \"service,\" like\n   * BigQuery or Storage.\n   *\n   * This handles making authenticated requests by exposing a `makeReq_`\n   * function.\n   *\n   * @constructor\n   * @alias module:common/service\n   *\n   * @param {object} config - Configuration object.\n   * @param {string} config.baseUrl - The base URL to make API requests to.\n   * @param {string[]} config.scopes - The scopes required for the request.\n   * @param {object=} options - [Configuration object](#/docs).\n   */\n  constructor(config, options = {}) {\n    this.baseUrl = config.baseUrl;\n    this.apiEndpoint = config.apiEndpoint;\n    this.timeout = options.timeout;\n    this.globalInterceptors = arrify(options.interceptors_);\n    this.interceptors = [];\n    this.packageJson = config.packageJson;\n    this.projectId = options.projectId || PROJECT_ID_TOKEN;\n    this.projectIdRequired = config.projectIdRequired !== false;\n    this.providedUserAgent = options.userAgent;\n    const reqCfg = extend({}, config, {\n      projectIdRequired: this.projectIdRequired,\n      projectId: this.projectId,\n      authClient: options.authClient,\n      credentials: options.credentials,\n      keyFile: options.keyFilename,\n      email: options.email,\n      token: options.token\n    });\n    this.makeAuthenticatedRequest = util_1.util.makeAuthenticatedRequestFactory(reqCfg);\n    this.authClient = this.makeAuthenticatedRequest.authClient;\n    this.getCredentials = this.makeAuthenticatedRequest.getCredentials;\n    const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n\n    if (isCloudFunctionEnv) {\n      this.interceptors.push({\n        request(reqOpts) {\n          reqOpts.forever = false;\n          return reqOpts;\n        }\n\n      });\n    }\n  }\n  /**\n   * Return the user's custom request interceptors.\n   */\n\n\n  getRequestInterceptors() {\n    // Interceptors should be returned in the order they were assigned.\n    return [].slice.call(this.globalInterceptors).concat(this.interceptors).filter(interceptor => typeof interceptor.request === 'function').map(interceptor => interceptor.request);\n  }\n\n  getProjectId(callback) {\n    if (!callback) {\n      return this.getProjectIdAsync();\n    }\n\n    this.getProjectIdAsync().then(p => callback(null, p), callback);\n  }\n\n  async getProjectIdAsync() {\n    const projectId = await this.authClient.getProjectId();\n\n    if (this.projectId === PROJECT_ID_TOKEN && projectId) {\n      this.projectId = projectId;\n    }\n\n    return this.projectId;\n  }\n\n  request_(reqOpts, callback) {\n    reqOpts = extend(true, {}, reqOpts, {\n      timeout: this.timeout\n    });\n    const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n    const uriComponents = [this.baseUrl];\n\n    if (this.projectIdRequired) {\n      uriComponents.push('projects');\n      uriComponents.push(this.projectId);\n    }\n\n    uriComponents.push(reqOpts.uri);\n\n    if (isAbsoluteUrl) {\n      uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n    }\n\n    reqOpts.uri = uriComponents.map(uriComponent => {\n      const trimSlashesRegex = /^\\/*|\\/*$/g;\n      return uriComponent.replace(trimSlashesRegex, '');\n    }).join('/') // Some URIs have colon separators.\n    // Bad: https://.../projects/:list\n    // Good: https://.../projects:list\n    .replace(/\\/:/g, ':');\n    const requestInterceptors = this.getRequestInterceptors();\n    arrify(reqOpts.interceptors_).forEach(interceptor => {\n      if (typeof interceptor.request === 'function') {\n        requestInterceptors.push(interceptor.request);\n      }\n    });\n    requestInterceptors.forEach(requestInterceptor => {\n      reqOpts = requestInterceptor(reqOpts);\n    });\n    delete reqOpts.interceptors_;\n    const pkg = this.packageJson;\n    let userAgent = util_1.util.getUserAgentFromPackageJson(pkg);\n\n    if (this.providedUserAgent) {\n      userAgent = \"\".concat(this.providedUserAgent, \" \").concat(userAgent);\n    }\n\n    reqOpts.headers = extend({}, reqOpts.headers, {\n      'User-Agent': userAgent,\n      'x-goog-api-client': \"gl-node/\".concat(process.versions.node, \" gccl/\").concat(pkg.version)\n    });\n\n    if (reqOpts.shouldReturnStream) {\n      return this.makeAuthenticatedRequest(reqOpts);\n    } else {\n      this.makeAuthenticatedRequest(reqOpts, callback);\n    }\n  }\n  /**\n   * Make an authenticated API request.\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n   * @param {function} callback - The callback function passed to `request`.\n   */\n\n\n  request(reqOpts, callback) {\n    Service.prototype.request_.call(this, reqOpts, callback);\n  }\n  /**\n   * Make an authenticated API request.\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n   */\n\n\n  requestStream(reqOpts) {\n    const opts = extend(true, reqOpts, {\n      shouldReturnStream: true\n    });\n    return Service.prototype.request_.call(this, opts);\n  }\n\n}\n\nexports.Service = Service;","map":null,"metadata":{},"sourceType":"script"}