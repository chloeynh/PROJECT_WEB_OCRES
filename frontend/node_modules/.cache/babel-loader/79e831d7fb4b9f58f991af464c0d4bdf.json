{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default('https-proxy-agent:parse-proxy-response');\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('close', onclose);\n      socket.removeListener('readable', read);\n    }\n\n    function onclose(err) {\n      debug('onclose had error %o', err);\n    }\n\n    function onend() {\n      debug('onend');\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const firstLine = buffered.toString('ascii', 0, buffered.indexOf('\\r\\n'));\n      const statusCode = +firstLine.split(' ')[1];\n      debug('got proxy server response: %o', firstLine);\n      resolve({\n        statusCode,\n        buffered\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('close', onclose);\n    socket.on('end', onend);\n    read();\n  });\n}\n\nexports.default = parseProxyResponse;","map":null,"metadata":{},"sourceType":"script"}