{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0; // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nconst crypto_1 = require(\"../crypto\");\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  async sha256DigestBase64(str) {\n    // SubtleCrypto digest() method is async, so we must make\n    // this method async as well.\n    // To calculate SHA256 digest using SubtleCrypto, we first\n    // need to convert an input string to an ArrayBuffer:\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n    const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n    return base64js.fromByteArray(new Uint8Array(outputBuffer));\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  static padBase64(base64) {\n    // base64js requires padding, so let's add some '='\n    while (base64.length % 4 !== 0) {\n      base64 += '=';\n    }\n\n    return base64;\n  }\n\n  async verify(pubkey, data, signature) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const dataArray = new TextEncoder().encode(data);\n    const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']); // SubtleCrypto's verify method is async so we must make\n    // this method async as well.\n\n    const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n    return result;\n  }\n\n  async sign(privateKey, data) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const dataArray = new TextEncoder().encode(data);\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']); // SubtleCrypto's sign method is async so we must make\n    // this method async as well.\n\n    const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n    return base64js.fromByteArray(new Uint8Array(result));\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n\n\n  async sha256DigestHex(str) {\n    // SubtleCrypto digest() method is async, so we must make\n    // this method async as well.\n    // To calculate SHA256 digest using SubtleCrypto, we first\n    // need to convert an input string to an ArrayBuffer:\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n    const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n    return crypto_1.fromArrayBufferToHex(outputBuffer);\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n\n\n  async signWithHmacSha256(key, msg) {\n    // Convert key, if provided in ArrayBuffer format, to string.\n    const rawKey = typeof key === 'string' ? key : String.fromCharCode(...new Uint16Array(key)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const enc = new TextEncoder();\n    const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n      name: 'HMAC',\n      hash: {\n        name: 'SHA-256'\n      }\n    }, false, ['sign']);\n    return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":null,"metadata":{},"sourceType":"script"}