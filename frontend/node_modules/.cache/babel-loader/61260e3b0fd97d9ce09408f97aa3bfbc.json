{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathTemplate = void 0;\n\nclass PathTemplate {\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data) {\n    this.bindings = {};\n    this.data = data;\n    this.segments = this.parsePathTemplate(data);\n    this.size = this.segments.length;\n  }\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n\n\n  match(path) {\n    let pathSegments = path.split('/');\n    const bindings = {};\n\n    if (pathSegments.length !== this.segments.length) {\n      // if the path contains a wildcard, then the length may differ by 1.\n      if (!this.data.includes('**')) {\n        throw new TypeError(\"This path \".concat(path, \" does not match path template \").concat(this.data, \", the number of parameters is not same.\"));\n      } else if (pathSegments.length !== this.segments.length + 1) {\n        throw new TypeError(\"This path \".concat(path, \" does not match path template \").concat(this.data, \", the number of parameters is not same with one wildcard.\"));\n      }\n    }\n\n    for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {\n      if (this.segments[index] !== pathSegments[0]) {\n        if (!this.segments[index].includes('*')) {\n          throw new TypeError(\"segment does not match, \".concat(this.segments[index], \" and  \").concat(pathSegments[index], \".\"));\n        } else {\n          let segment = this.segments[index];\n          const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\n\n          if (!matches) {\n            throw new Error(\"Error processing path template segment \".concat(segment));\n          }\n\n          const variables = matches.map(str => str.replace(/^\\{/, '').replace(/=.*/, ''));\n\n          if (segment.includes('**')) {\n            bindings[variables[0]] = pathSegments[0] + '/' + pathSegments[1];\n            pathSegments = pathSegments.slice(2);\n          } else {\n            // atomic resource\n            if (variables.length === 1) {\n              bindings[variables[0]] = pathSegments[0];\n            } else {\n              // non-slash resource\n              // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\n              // split the match pathSegments[0] -> value: ['bar', 'user2']\n              // compare the length of two arrays, and compare array items\n              const value = pathSegments[0].split(/[-_.~]/);\n\n              if (value.length !== variables.length) {\n                throw new Error(\"segment \".concat(segment, \" does not match \").concat(pathSegments[0]));\n              }\n\n              for (const v of variables) {\n                bindings[v] = value[0];\n                segment = segment.replace(\"{\".concat(v, \"=*}\"), \"\".concat(value[0]));\n                value.shift();\n              } // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\n\n\n              if (segment !== pathSegments[0]) {\n                throw new TypeError(\"non slash resource pattern \".concat(this.segments[index], \" and \").concat(pathSegments[0], \" should have same separator\"));\n              }\n            }\n\n            pathSegments.shift();\n          }\n        }\n      } else {\n        pathSegments.shift();\n      }\n    }\n\n    return bindings;\n  }\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n\n\n  render(bindings) {\n    if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\n      throw new TypeError(\"The number of variables \".concat(Object.keys(bindings).length, \" does not match the number of needed variables \").concat(Object.keys(this.bindings).length));\n    }\n\n    let path = this.inspect();\n\n    for (const key of Object.keys(bindings)) {\n      const b = bindings[key].toString();\n\n      if (!this.bindings[key]) {\n        throw new TypeError(\"render fails for not matching \".concat(bindings[key]));\n      }\n\n      const variable = this.bindings[key];\n\n      if (variable === '*') {\n        if (!b.match(/[^/{}]+/)) {\n          throw new TypeError(\"render fails for not matching \".concat(b));\n        }\n\n        path = path.replace(\"{\".concat(key, \"=*}\"), \"\".concat(b));\n      } else if (variable === '**') {\n        if (!b.match(/[^{}]+/)) {\n          throw new TypeError(\"render fails for not matching \".concat(b));\n        }\n\n        path = path.replace(\"{\".concat(key, \"=**}\"), \"\".concat(b));\n      }\n    }\n\n    return path;\n  }\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n\n\n  inspect() {\n    return this.segments.join('/');\n  }\n  /**\n   * Parse the path template.\n   *\n   * @return {string[]} return segments of the input path.\n   * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\n   */\n\n\n  parsePathTemplate(data) {\n    const pathSegments = splitPathTemplate(data);\n    let index = 0;\n    let wildCardCount = 0;\n    const segments = [];\n    let matches;\n    pathSegments.forEach(segment => {\n      // * or ** -> segments.push('{$0=*}');\n      //         -> bindings['$0'] = '*'\n      if (segment === '*' || segment === '**') {\n        this.bindings[\"$\".concat(index)] = segment;\n        segments.push(\"{$\".concat(index, \"=\").concat(segment, \"}\"));\n        index = index + 1;\n\n        if (segment === '**') {\n          ++wildCardCount;\n        }\n      } else if (matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g)) {\n        for (const subsegment of matches) {\n          const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\n\n          if (!pairMatch) {\n            throw new Error(\"Cannot process path template segment \".concat(subsegment));\n          }\n\n          const key = pairMatch[1];\n          let value = pairMatch[2];\n\n          if (!value) {\n            value = '*';\n            segment = segment.replace(key, key + '=*');\n            this.bindings[key] = value;\n          } else if (value === '*') {\n            this.bindings[key] = value;\n          } else if (value === '**') {\n            ++wildCardCount;\n            this.bindings[key] = value;\n          }\n        }\n\n        segments.push(segment);\n      } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\n        segments.push(segment);\n      }\n    });\n\n    if (wildCardCount > 1) {\n      throw new TypeError('Can not have more than one wildcard.');\n    }\n\n    return segments;\n  }\n\n}\n\nexports.PathTemplate = PathTemplate;\n/**\n * Split the path template by `/`.\n * It can not be simply splitted by `/` because there might be `/` in the segments.\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\n */\n\nfunction splitPathTemplate(data) {\n  let left = 0;\n  let right = 0;\n  let bracketCount = 0;\n  const segments = [];\n\n  while (right >= left && right < data.length) {\n    if (data.charAt(right) === '{') {\n      bracketCount = bracketCount + 1;\n    } else if (data.charAt(right) === '}') {\n      bracketCount = bracketCount - 1;\n    } else if (data.charAt(right) === '/') {\n      if (right === data.length - 1) {\n        throw new TypeError('Invalid path, it can not be ended by /');\n      }\n\n      if (bracketCount === 0) {\n        // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\n        segments.push(data.substring(left, right));\n        left = right + 1;\n      }\n    }\n\n    if (right === data.length - 1) {\n      if (bracketCount !== 0) {\n        throw new TypeError('Brackets are invalid.');\n      }\n\n      segments.push(data.substring(left));\n    }\n\n    right = right + 1;\n  }\n\n  return segments;\n}","map":null,"metadata":{},"sourceType":"script"}