{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _slicedToArray = require(\"/Users/chloe/Documents/Cours/ING4/Techno Web/PROJECT_WEB_OCRES/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufValueFromProto3JSON = exports.googleProtobufListValueFromProto3JSON = exports.googleProtobufStructFromProto3JSON = exports.googleProtobufValueToProto3JSON = exports.googleProtobufListValueToProto3JSON = exports.googleProtobufStructToProto3JSON = void 0;\n\nconst assert = require(\"assert\");\n\nfunction googleProtobufStructToProto3JSON(obj) {\n  const result = {};\n  const fields = obj.fields;\n\n  for (const _ref of Object.entries(fields)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const key = _ref2[0];\n    const value = _ref2[1];\n    result[key] = googleProtobufValueToProto3JSON(value);\n  }\n\n  return result;\n}\n\nexports.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;\n\nfunction googleProtobufListValueToProto3JSON(obj) {\n  assert(Array.isArray(obj.values), 'ListValue internal representation must contain array of values');\n  return obj.values.map(googleProtobufValueToProto3JSON);\n}\n\nexports.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;\n\nfunction googleProtobufValueToProto3JSON(obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, 'nullValue')) {\n    return null;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'numberValue') && typeof obj.numberValue === 'number') {\n    if (!Number.isFinite(obj.numberValue)) {\n      return obj.numberValue.toString();\n    }\n\n    return obj.numberValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'stringValue') && typeof obj.stringValue === 'string') {\n    return obj.stringValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'boolValue') && typeof obj.boolValue === 'boolean') {\n    return obj.boolValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'structValue') && typeof obj.structValue === 'object') {\n    return googleProtobufStructToProto3JSON(obj.structValue);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'listValue') && typeof obj === 'object' && typeof obj.listValue === 'object') {\n    return googleProtobufListValueToProto3JSON(obj.listValue);\n  } // Assuming empty Value to be null\n\n\n  return null;\n}\n\nexports.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;\n\nfunction googleProtobufStructFromProto3JSON(json) {\n  const fields = {};\n\n  for (const _ref3 of Object.entries(json)) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    const key = _ref4[0];\n    const value = _ref4[1];\n    fields[key] = googleProtobufValueFromProto3JSON(value);\n  }\n\n  return {\n    fields\n  };\n}\n\nexports.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;\n\nfunction googleProtobufListValueFromProto3JSON(json) {\n  return {\n    values: json.map(element => googleProtobufValueFromProto3JSON(element))\n  };\n}\n\nexports.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;\n\nfunction googleProtobufValueFromProto3JSON(json) {\n  if (json === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  }\n\n  if (typeof json === 'number') {\n    return {\n      numberValue: json\n    };\n  }\n\n  if (typeof json === 'string') {\n    return {\n      stringValue: json\n    };\n  }\n\n  if (typeof json === 'boolean') {\n    return {\n      boolValue: json\n    };\n  }\n\n  if (Array.isArray(json)) {\n    return {\n      listValue: googleProtobufListValueFromProto3JSON(json)\n    };\n  }\n\n  if (typeof json === 'object') {\n    return {\n      structValue: googleProtobufStructFromProto3JSON(json)\n    };\n  }\n\n  throw new Error(\"googleProtobufValueFromProto3JSON: incorrect parameter type: \".concat(typeof json));\n}\n\nexports.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;","map":null,"metadata":{},"sourceType":"script"}