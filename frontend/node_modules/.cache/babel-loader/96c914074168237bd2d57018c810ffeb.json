{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"/Users/chloe/Documents/Cours/ING4/Techno Web/PROJECT_WEB_OCRES/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transcode = exports.getFieldNameOnBehavior = exports.isRequiredField = exports.isProto3OptionalField = exports.requestChangeCaseAndCleanup = exports.flattenObject = exports.match = exports.applyPattern = exports.encodeWithoutSlashes = exports.encodeWithSlashes = exports.buildQueryStringComponents = exports.deleteField = exports.deepCopy = exports.getField = void 0;\n\nconst util_1 = require(\"./util\");\n\nconst httpOptionName = '(google.api.http)';\nconst fieldBehaviorOptionName = '(google.api.field_behavior)';\nconst proto3OptionalName = 'proto3_optional'; // List of methods as defined in google/api/http.proto (see HttpRule)\n\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\n\nfunction getField(request, field) {\n  const parts = field.split('.');\n  let value = request;\n\n  for (const part of parts) {\n    if (typeof value !== 'object') {\n      return undefined;\n    }\n\n    value = value[part];\n  }\n\n  if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n    return undefined;\n  }\n\n  return value;\n}\n\nexports.getField = getField;\n\nfunction deepCopy(request) {\n  if (typeof request !== 'object' || request === null) {\n    return request;\n  }\n\n  const copy = Object.assign({}, request);\n\n  for (const key in copy) {\n    if (Array.isArray(copy[key])) {\n      copy[key] = copy[key].map(deepCopy);\n    } else if (typeof copy[key] === 'object' && copy[key] !== null) {\n      copy[key] = deepCopy(copy[key]);\n    }\n  }\n\n  return copy;\n}\n\nexports.deepCopy = deepCopy;\n\nfunction deleteField(request, field) {\n  const parts = field.split('.');\n\n  while (parts.length > 1) {\n    if (typeof request !== 'object') {\n      return;\n    }\n\n    const part = parts.shift();\n    request = request[part];\n  }\n\n  const part = parts.shift();\n\n  if (typeof request !== 'object') {\n    return;\n  }\n\n  delete request[part];\n}\n\nexports.deleteField = deleteField;\n\nfunction buildQueryStringComponents(request, prefix = '') {\n  const resultList = [];\n\n  for (const key in request) {\n    if (Array.isArray(request[key])) {\n      for (const value of request[key]) {\n        resultList.push(\"\".concat(prefix).concat(encodeWithoutSlashes(key), \"=\").concat(encodeWithoutSlashes(value.toString())));\n      }\n    } else if (typeof request[key] === 'object' && request[key] !== null) {\n      resultList.push(...buildQueryStringComponents(request[key], \"\".concat(key, \".\")));\n    } else {\n      resultList.push(\"\".concat(prefix).concat(encodeWithoutSlashes(key), \"=\").concat(encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())));\n    }\n  }\n\n  return resultList;\n}\n\nexports.buildQueryStringComponents = buildQueryStringComponents;\n\nfunction encodeWithSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join('');\n}\n\nexports.encodeWithSlashes = encodeWithSlashes;\n\nfunction encodeWithoutSlashes(str) {\n  return str.split('').map(c => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join('');\n}\n\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction applyPattern(pattern, fieldValue) {\n  if (!pattern || pattern === '*') {\n    return encodeWithSlashes(fieldValue);\n  }\n\n  if (!pattern.includes('*') && pattern !== fieldValue) {\n    return undefined;\n  } // since we're converting the pattern to a regex, make necessary precautions:\n\n\n  const regex = new RegExp('^' + escapeRegExp(pattern).replace(/\\\\\\*\\\\\\*/g, '(.+)').replace(/\\\\\\*/g, '([^/]+)') + '$');\n\n  if (!fieldValue.match(regex)) {\n    return undefined;\n  }\n\n  return encodeWithoutSlashes(fieldValue);\n}\n\nexports.applyPattern = applyPattern;\n\nfunction match(request, pattern) {\n  let url = pattern;\n  const matchedFields = [];\n\n  for (;;) {\n    const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n\n    if (!match) {\n      break;\n    }\n\n    const _match = _slicedToArray(match, 5),\n          before = _match[1],\n          field = _match[2],\n          pattern = _match[3],\n          after = _match[4];\n\n    matchedFields.push(field);\n    const fieldValue = getField(request, field);\n\n    if (typeof fieldValue === 'undefined') {\n      return undefined;\n    }\n\n    const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n\n    if (typeof appliedPattern === 'undefined') {\n      return undefined;\n    }\n\n    url = before + appliedPattern + after;\n  }\n\n  return {\n    matchedFields,\n    url\n  };\n}\n\nexports.match = match;\n\nfunction flattenObject(request) {\n  const result = {};\n\n  for (const key in request) {\n    if (typeof request[key] === 'undefined') {\n      continue;\n    }\n\n    if (Array.isArray(request[key])) {\n      // According to the http.proto comments, a repeated field may only\n      // contain primitive types, so no extra recursion here.\n      result[key] = request[key];\n      continue;\n    }\n\n    if (typeof request[key] === 'object' && request[key] !== null) {\n      const nested = flattenObject(request[key]);\n\n      for (const nestedKey in nested) {\n        result[\"\".concat(key, \".\").concat(nestedKey)] = nested[nestedKey];\n      }\n\n      continue;\n    }\n\n    result[key] = request[key];\n  }\n\n  return result;\n}\n\nexports.flattenObject = flattenObject;\n\nfunction requestChangeCaseAndCleanup(request, caseChangeFunc) {\n  if (!request || typeof request !== 'object') {\n    return request;\n  }\n\n  const convertedRequest = {};\n\n  for (const field in request) {\n    // cleaning up inherited properties\n    if (!Object.prototype.hasOwnProperty.call(request, field)) {\n      continue;\n    }\n\n    const convertedField = caseChangeFunc(field);\n    const value = request[field];\n\n    if (Array.isArray(value)) {\n      convertedRequest[convertedField] = value.map(v => requestChangeCaseAndCleanup(v, caseChangeFunc));\n    } else {\n      convertedRequest[convertedField] = requestChangeCaseAndCleanup(value, caseChangeFunc);\n    }\n  }\n\n  return convertedRequest;\n}\n\nexports.requestChangeCaseAndCleanup = requestChangeCaseAndCleanup;\n\nfunction isProto3OptionalField(field) {\n  return field && field.options && field.options[proto3OptionalName];\n}\n\nexports.isProto3OptionalField = isProto3OptionalField;\n\nfunction isRequiredField(field) {\n  return field && field.options && field.options[fieldBehaviorOptionName] === 'REQUIRED';\n}\n\nexports.isRequiredField = isRequiredField;\n\nfunction getFieldNameOnBehavior(fields) {\n  const requiredFields = new Set();\n  const optionalFields = new Set();\n\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n\n    if (isRequiredField(field)) {\n      requiredFields.add(fieldName);\n    }\n\n    if (isProto3OptionalField(field)) {\n      optionalFields.add(fieldName);\n    }\n  }\n\n  return {\n    requiredFields,\n    optionalFields\n  };\n}\n\nexports.getFieldNameOnBehavior = getFieldNameOnBehavior;\n\nfunction transcode(request, parsedOptions, requestFields) {\n  const _getFieldNameOnBehavi = getFieldNameOnBehavior(requestFields),\n        requiredFields = _getFieldNameOnBehavi.requiredFields,\n        optionalFields = _getFieldNameOnBehavi.optionalFields; // all fields annotated as REQUIRED MUST be emitted in the body.\n\n\n  for (const requiredField of requiredFields) {\n    if (!(requiredField in request) || request[requiredField] === 'undefined') {\n      throw new Error(\"Required field \".concat(requiredField, \" is not present in the request.\"));\n    }\n  } // request is supposed to have keys in camelCase.\n\n\n  const snakeRequest = requestChangeCaseAndCleanup(request, util_1.camelToSnakeCase);\n  const httpRules = [];\n\n  for (const option of parsedOptions) {\n    if (!(httpOptionName in option)) {\n      continue;\n    }\n\n    const httpRule = option[httpOptionName];\n    httpRules.push(httpRule);\n\n    if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {\n      const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];\n      httpRules.push(...additionalBindings);\n    }\n  }\n\n  for (const httpRule of httpRules) {\n    for (const httpMethod of supportedHttpMethods) {\n      if (!(httpMethod in httpRule)) {\n        continue;\n      }\n\n      const pathTemplate = httpRule[httpMethod];\n      const matchResult = match(snakeRequest, pathTemplate);\n\n      if (typeof matchResult === 'undefined') {\n        continue;\n      }\n\n      const url = matchResult.url,\n            matchedFields = matchResult.matchedFields;\n\n      if (httpRule.body === '*') {\n        // all fields except the matched fields go to request data\n        const data = deepCopy(snakeRequest);\n\n        for (const field of matchedFields) {\n          deleteField(data, field);\n        } // Remove unset proto3 optional field from the request body.\n\n\n        for (const key in data) {\n          if (optionalFields.has(util_1.snakeToCamelCase(key)) && (!(key in snakeRequest) || snakeRequest[key] === 'undefined')) {\n            delete data[key];\n          }\n        } // HTTP endpoint expects camelCase but we have snake_case at this point\n\n\n        const camelCaseData = requestChangeCaseAndCleanup(data, util_1.snakeToCamelCase);\n        return {\n          httpMethod,\n          url,\n          queryString: '',\n          data: camelCaseData\n        };\n      } // one field possibly goes to request data, others go to query string\n\n\n      const body = httpRule.body;\n      let data = '';\n      const queryStringObject = deepCopy(request); // use camel case for query string\n\n      if (body) {\n        deleteField(queryStringObject, util_1.snakeToCamelCase(body)); // Unset optional field should not add in body request.\n\n        data = optionalFields.has(body) && snakeRequest[body] === 'undefined' ? '' : snakeRequest[body];\n      }\n\n      for (const field of matchedFields) {\n        deleteField(queryStringObject, util_1.snakeToCamelCase(field));\n      } // Unset proto3 optional field does not appear in the query params.\n\n\n      for (const key in queryStringObject) {\n        if (optionalFields.has(key) && request[key] === 'undefined') {\n          delete queryStringObject[key];\n        }\n      }\n\n      const queryStringComponents = buildQueryStringComponents(queryStringObject);\n      const queryString = queryStringComponents.join('&');\n      let camelCaseData;\n\n      if (typeof data === 'string') {\n        camelCaseData = data;\n      } else {\n        camelCaseData = requestChangeCaseAndCleanup(data, util_1.snakeToCamelCase);\n      }\n\n      return {\n        httpMethod,\n        url,\n        queryString,\n        data: camelCaseData\n      };\n    }\n  }\n\n  return undefined;\n}\n\nexports.transcode = transcode;","map":null,"metadata":{},"sourceType":"script"}