{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Impersonated = void 0;\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Impersonated extends oauth2client_1.OAuth2Client {\n  /**\n   * Impersonated service account credentials.\n   *\n   * Create a new access token by impersonating another service account.\n   *\n   * Impersonated Credentials allowing credentials issued to a user or\n   * service account to impersonate another. The source project using\n   * Impersonated Credentials must enable the \"IAMCredentials\" API.\n   * Also, the target service account must grant the orginating principal\n   * the \"Service Account Token Creator\" IAM role.\n   *\n   * @param {object} options - The configuration object.\n   * @param {object} [options.sourceClient] the source credential used as to\n   * acquire the impersonated credentials.\n   * @param {string} [options.targetPrincipal] the service account to\n   * impersonate.\n   * @param {string[]} [options.delegates] the chained list of delegates\n   * required to grant the final access_token. If set, the sequence of\n   * identities must have \"Service Account Token Creator\" capability granted to\n   * the preceding identity. For example, if set to [serviceAccountB,\n   * serviceAccountC], the sourceCredential must have the Token Creator role on\n   * serviceAccountB. serviceAccountB must have the Token Creator on\n   * serviceAccountC. Finally, C must have Token Creator on target_principal.\n   * If left unset, sourceCredential must have that role on targetPrincipal.\n   * @param {string[]} [options.targetScopes] scopes to request during the\n   * authorization grant.\n   * @param {number} [options.lifetime] number of seconds the delegated\n   * credential should be valid for up to 3600 seconds by default, or 43,200\n   * seconds by extending the token's lifetime, see:\n   * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n   * @param {string} [options.endpoint] api endpoint override.\n   */\n  constructor(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n\n    super(options);\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'impersonated-placeholder'\n    };\n    this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n    this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n    this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n    this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n    this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n    this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : 'https://iamcredentials.googleapis.com';\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  async refreshToken(refreshToken) {\n    var _a, _b, _c, _d, _e, _f;\n\n    try {\n      await this.sourceClient.getAccessToken();\n      const name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n      const u = \"\".concat(this.endpoint, \"/v1/\").concat(name, \":generateAccessToken\");\n      const body = {\n        delegates: this.delegates,\n        scope: this.targetScopes,\n        lifetime: this.lifetime + 's'\n      };\n      const res = await this.sourceClient.request({\n        url: u,\n        data: body,\n        method: 'POST'\n      });\n      const tokenResponse = res.data;\n      this.credentials.access_token = tokenResponse.accessToken;\n      this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n      return {\n        tokens: this.credentials,\n        res\n      };\n    } catch (error) {\n      const status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n      const message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n\n      if (status && message) {\n        error.message = \"\".concat(status, \": unable to impersonate: \").concat(message);\n        throw error;\n      } else {\n        error.message = \"unable to impersonate: \".concat(error);\n        throw error;\n      }\n    }\n  }\n\n}\n\nexports.Impersonated = Impersonated;","map":null,"metadata":{},"sourceType":"script"}