{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst googleError_1 = require(\"./googleError\");\n\nclass OngoingCall {\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n  /**\n   * Cancels the ongoing promise.\n   */\n\n\n  cancel() {\n    if (this.completed) {\n      return;\n    }\n\n    this.completed = true;\n\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new googleError_1.GoogleError('cancelled');\n      error.code = status_1.Status.CANCELLED;\n      this.callback(error);\n    }\n  }\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n\n\n  call(func, argument) {\n    if (this.completed) {\n      return;\n    }\n\n    const canceller = func(argument, (err, response, next, rawResponse) => {\n      this.completed = true;\n      setImmediate(this.callback, err, response, next, rawResponse);\n    });\n\n    this.cancelFunc = () => canceller.cancel();\n  }\n\n}\n\nexports.OngoingCall = OngoingCall;\n\nclass OngoingCallPromise extends OngoingCall {\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @constructor\n   * @private\n   */\n  constructor() {\n    let resolveCallback;\n    let rejectCallback;\n\n    const callback = (err, response, next, rawResponse) => {\n      if (err) {\n        // If gRPC metadata exist, parsed google.rpc.status details.\n        if (err.metadata) {\n          rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n        } else {\n          rejectCallback(err);\n        }\n      } else if (response !== undefined) {\n        resolveCallback([response, next || null, rawResponse || null]);\n      } else {\n        throw new googleError_1.GoogleError('Neither error nor response are defined');\n      }\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      resolveCallback = resolve;\n      rejectCallback = reject;\n    });\n    super(callback);\n    this.promise = promise;\n\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n\n}\n\nexports.OngoingCallPromise = OngoingCallPromise;","map":null,"metadata":{},"sourceType":"script"}