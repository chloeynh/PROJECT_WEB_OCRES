{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst fallback_1 = require(\"./fallback\");\n\nconst googleError_1 = require(\"./googleError\");\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const protoNamespaces = [];\n  let currNamespace = rpc.parent;\n\n  while (currNamespace.name !== '') {\n    protoNamespaces.unshift(currNamespace.name);\n    currNamespace = currNamespace.parent;\n  }\n\n  const protoServiceName = protoNamespaces.join('.');\n  const rpcName = rpc.name;\n  const headers = {\n    'Content-Type': 'application/x-protobuf'\n  };\n  const method = 'post';\n  const requestMessage = rpc.resolvedRequestType.fromObject(request);\n  const body = rpc.resolvedRequestType.encode(requestMessage).finish();\n  const url = \"\".concat(protocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/$rpc/\").concat(protoServiceName, \"/\").concat(rpcName);\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  if (!ok) {\n    const statusDecoder = new googleError_1.GoogleErrorDecoder();\n    const error = statusDecoder.decodeErrorFromBuffer(response);\n    throw error;\n  }\n\n  const buffer = response instanceof ArrayBuffer ? new Uint8Array(response) : response;\n  const message = rpc.resolvedResponseType.decode(buffer);\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":null,"metadata":{},"sourceType":"script"}