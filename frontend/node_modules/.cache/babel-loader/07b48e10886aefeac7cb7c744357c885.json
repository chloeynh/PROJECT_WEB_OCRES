{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nconst querystring = require(\"querystring\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\n\n\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an STS credentials instance.\n   * @param tokenExchangeEndpoint The token exchange endpoint.\n   * @param clientAuthentication The client authentication credentials if\n   *   available.\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n\n\n  async exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _a, _b, _c;\n\n    const values = {\n      grant_type: stsCredentialsOptions.grantType,\n      resource: stsCredentialsOptions.resource,\n      audience: stsCredentialsOptions.audience,\n      scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n      requested_token_type: stsCredentialsOptions.requestedTokenType,\n      subject_token: stsCredentialsOptions.subjectToken,\n      subject_token_type: stsCredentialsOptions.subjectTokenType,\n      actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n      actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n      // Non-standard GCP-specific options.\n      options: options && JSON.stringify(options)\n    }; // Remove undefined fields.\n\n    Object.keys(values).forEach(key => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof values[key] === 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete values[key];\n      }\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }; // Inject additional STS headers if available.\n\n    Object.assign(headers, additionalHeaders || {});\n    const opts = {\n      url: this.tokenExchangeEndpoint,\n      method: 'POST',\n      headers,\n      data: querystring.stringify(values),\n      responseType: 'json'\n    }; // Apply OAuth client authentication.\n\n    this.applyClientAuthenticationOptions(opts);\n\n    try {\n      const response = await this.transporter.request(opts); // Successful response.\n\n      const stsSuccessfulResponse = response.data;\n      stsSuccessfulResponse.res = response;\n      return stsSuccessfulResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error.response) {\n        throw oauth2common_1.getErrorFromOAuthErrorResponse(error.response.data, // Preserve other fields from the original error.\n        error);\n      } // Request could fail before the server responds.\n\n\n      throw error;\n    }\n  }\n\n}\n\nexports.StsCredentials = StsCredentials;","map":null,"metadata":{},"sourceType":"script"}