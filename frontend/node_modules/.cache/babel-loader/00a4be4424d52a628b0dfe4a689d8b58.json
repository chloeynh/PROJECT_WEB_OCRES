{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\n\nconst arrify = require(\"arrify\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options = {}) {\n    super(options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    this.scopes = arrify(options.scopes);\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  async refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const tokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/token\");\n    let data;\n\n    try {\n      const instanceOptions = {\n        property: tokenPath\n      };\n\n      if (this.scopes.length > 0) {\n        instanceOptions.params = {\n          scopes: this.scopes.join(',')\n        };\n      }\n\n      data = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      e.message = \"Could not refresh access token: \".concat(e.message);\n      this.wrapError(e);\n      throw e;\n    }\n\n    const tokens = data;\n\n    if (data && data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res: null\n    };\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n\n\n  async fetchIdToken(targetAudience) {\n    const idTokenPath = \"service-accounts/\".concat(this.serviceAccountEmail, \"/identity\") + \"?format=full&audience=\".concat(targetAudience);\n    let idToken;\n\n    try {\n      const instanceOptions = {\n        property: idTokenPath\n      };\n      idToken = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      e.message = \"Could not fetch ID token: \".concat(e.message);\n      throw e;\n    }\n\n    return idToken;\n  }\n\n  wrapError(e) {\n    const res = e.response;\n\n    if (res && res.status) {\n      e.code = res.status.toString();\n\n      if (res.status === 403) {\n        e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n      } else if (res.status === 404) {\n        e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n      }\n    }\n  }\n\n}\n\nexports.Compute = Compute;","map":null,"metadata":{},"sourceType":"script"}